[{"/Users/meek/programming/playground/src/index.js":"1"},{"size":10979,"mtime":1654587200144,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","suppressedMessages":"6","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":1,"source":"7"},"126frlq","/Users/meek/programming/playground/src/index.js",["8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26"],[],"import React from \"react\";\nimport ReactDOM from \"react-dom/client\"; //from react-dom/client, not react\nimport './index.css';\n\n/**\n * 'The sun is rising\n * it's almost dawn! \n * The night is short --\n * walk on, girl.\n */\n\n//test stuff\nclass Osc extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      rootFreq: 440,\n      currentFreq: 440,\n      playing: false,\n      context: props.context,\n      initialized: false,\n    };\n    var filter = null;\n    var oscillator = null;\n  }\n  init = () => {\n    //init audioContext\n    this.setState({initialized: true});\n    this.oscillator = this.state.context.createOscillator();\n    this.oscillator.gain = this.state.context.createGain();\n    this.oscillator.gain.gain.setValueAtTime(1, 0);\n    this.oscillator.type = 'square';\n    this.oscillator.frequency.setValueAtTime(this.state.rootFreq, 2);\n    this.oscillator.connect(this.oscillator.gain);\n    this.play();\n  }\n  play = () => {\n    if(this.state.playing == false) this.oscillator.start();\n  }\n  updateGain = (newGain) => {\n    this.oscillator.gain.gain.setValueAtTime(newGain, 0);\n    console.log('gain updated');\n  }\n  updateRootFreq = (newFreq) => {\n    //For pitch adjustment purposes -- do not use with sequencer class\n    this.setState({rootFreq: newFreq}, () => this.updateFreq(newFreq));\n  }\n  updateFreq = (newFreq) => {\n    //For sequencing purposes\n    this.setState({currentFreq: newFreq}, () => {\n      if(this.oscillator != null) this.oscillator.frequency.value = this.state.currentFreq;\n    })\n    return this.state.rootFreq;\n  }\n  stop = () => {\n    if(this.state.playing == true) {\n      this.setState({playing: false}, () => this.oscillator.stop());\n    }\n  }\n  render(){\n    return (\n      <div className=\"mainDiv\">\n        <button className=\"key\" onClick={ () => {\n        this.state.context.resume();\n        if(this.state.initialized == false){\n          this.init();\n        }\n        else this.play();\n       } }>Play</button>\n       <button className=\"key\" onClick={ () => {\n         this.state.context.suspend();\n         if(this.state.playing == true) this.stop()\n       }}>Stop</button>\n       <Slider sliderName = \"Gain\" minVal = {0} maxVal = {1} defaultVal = {0.5} step ={0.05} callbackFn = {this.updateGain} />\n       <Slider sliderName = \"Pitch\" minVal = {0} maxVal = {1000} defaultVal = {440} callbackFn = {this.updateRootFreq} />\n       <Filter context = {this.props.context} oscillator = {this.oscillator} />\n       <Sequencer callbackFn = {this.updateFreq}/>\n       <Envelope oscillator = {this.oscillator} callbackFn = {this.updateGain} />\n      </div>\n    );\n  }\n}\nclass Slider extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      minVal: props.minVal,\n      maxVal: props.maxVal,\n      step: props.step,\n      defaultVal: props.currentVal,\n      sliderName: props.sliderName,\n      callbackFn: function(value){\n        props.callbackFn(value);\n      },\n    }\n  }\n  render = (props) => {\n    return(\n      <span className=\"freq_slider\">\n        <div>{this.state.sliderName}</div>\n          <input type =\"range\" min={this.state.minVal} max={this.state.maxVal} defaultValue ={this.state.defaultVal} step = {this.state.step} className=\"slider\" id={this.state.sliderName} onChange={() =>{\n            this.state.callbackFn(document.getElementById(this.props.sliderName).value);\n          }}></input>\n      </span>\n    );\n  }\n}\nclass Sequencer extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      length: 4,\n      currentStep: 0,\n      rootFreq: 440,\n      running: false,\n      tempo: 1000, //in milliseconds\n      callbackFn: this.props.callbackFn,\n    };\n    const interval = null;\n    const envelope = null;\n  }\n  pluckSequence = (step) => {\n    this.setState({currentStep: step});\n    let newFreq = this.state.rootFreq * (step + 0.5);\n    this.state.callbackFn(newFreq);\n    console.log(step);\n    if(this.state.running == false) {\n      this.interval = setInterval(() => this.runSequence(), this.state.tempo);\n    }\n  }\n  runSequence = () => {\n    document.getElementById(\"triggerEnvelope\").click();\n    let step = (this.state.currentStep + 1) % this.state.length;\n    this.setState({currentStep: step, running: true});\n    let newFreq = this.state.rootFreq * (step + 0.5);\n    this.setState({rootFreq: this.state.callbackFn(newFreq)});\n    console.log(\"Current Pitch: \" + newFreq + \"Current Step: \" + step);\n  }\n  stopSequence = () => {\n\n  }\n  stepUpLength = () => {\n    this.setState({length: this.state.length + 1});\n  }\n  stepDownLength = () => {\n    if(this.state.length - 1 > 0) this.setState({length: this.state.length - 1});\n    else console.error(\"Minimum sequencer length reached\");\n  }\n  updateTempo = (newTempo) => {\n    this.setState({tempo: newTempo});\n    clearInterval(this.interval);\n    this.interval = setInterval(() => this.runSequence(), newTempo);\n  }\n  render = (props) => {\n    const buttonList = [];\n    for(let i = 0; i < this.state.length; i++){\n      console.log(buttonList);\n      buttonList[i] = <button className=\"seqStep\" key={i + '_step'} onClick={() => this.pluckSequence(i)}>{i}</button>;\n    }\n    return(\n      <div>\n        <button className=\"key\" onClick={() => this.stepUpLength() }>+</button>\n        <button className=\"key\" onClick={() => this.stepDownLength() }>-</button>\n        <Slider sliderName=\"Tempo\" minVal={20} maxVal={1000} defaultVal={100} callbackFn={this.updateTempo} />\n        {buttonList}\n      </div>\n    );\n  }\n}\nclass Filter extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      cutoff: 5000,\n      resonance: 1,     //between 0.0001 and 1000\n      context: this.props.context,\n      initialized: false,\n    }\n    const filter = 0;\n    const oscillator = this.props.oscillator;\n    const mode = 'lowpass';\n  }\n  init = (props) => {\n    this.setState({initialized: true, context: this.props.context}, () => {\n      this.filter = this.state.context.createBiquadFilter();\n      this.oscillator = this.props.oscillator;\n      console.log(this.oscillator);\n      console.log(this.oscillator.gain);\n      this.oscillator.gain.connect(this.filter);\n      this.filter.connect(this.state.context.destination);\n      this.filter.type = this.mode;\n      this.filter.frequency.setValueAtTime(this.state.cutoff, 1);\n      this.filter.q = this.filter.resonance;\n      console.log(\"filter initialized\");\n      console.log(this.filter);\n      console.log(this.state.context.destination);\n    })\n  }\n  updateCutoff = (freq) => {\n    this.setState({cutoff: freq}, this.updateFilter());\n  }\n  updateResonance = (q) => {\n    this.setState({resonance: q}, this.updateFilter());\n  }\n  updateFilter = () => {\n    if(this.state.context != null){\n      if(this.state.initialized != false){\n        this.filter.frequency.setValueAtTime(this.state.cutoff, 1);\n        this.filter.Q.value = this.state.resonance;\n        this.filter.type = this.mode;\n        console.log(\"filter updated\");\n      }\n      else this.init();\n      \n    } \n    else console.log(\"failed to load audioContext() in updateFilter()\")\n  }\n  render(){\n    return(\n      <div className=\"inlineDiv\">\n        <div>\n          <Slider sliderName = \"Cutoff\" minVal={0} maxVal={5000} defaultVal={this.state.cutoff} callbackFn={this.updateCutoff}/>\n          <Slider sliderName = \"Resonance\" minVal={1} maxVal={100} defaultVal={this.state.resonance} callbackFn={this.updateResonance}/>\n        </div>\n        <div>\n          <button className=\"key\" onClick={() => this.mode = 'lowpass'}> lowpass </button>\n          <button className=\"key\" onClick={() => this.mode = 'highpass'}> highpass </button>\n        </div>\n      </div>\n    );\n  }\n\n}\nclass Envelope extends React.Component {\n  //Takes in a gain node from props.oscillator.gain\n  constructor(props) {\n    super(props);\n    this.state = {\n      attack: 50, //cycles of updateAttack\n      release: 50, //cycles of updateRelease\n      gain: 1,\n      callbackFn: this.props.callbackFn,\n    }\n    const secsPerUpdate = 5000;\n    const counter = 0;\n    const attackInterval = null;\n    const releaseInterval = null;\n  }\n  setAttack = (val) => this.setState({attack: val});\n  setRelease = (val) => this.setState({release: val});\n  updateAttack = () => {\n    //let newGain = this.state.gain/(this.state.attack - this.counter);\n    let newGain = Math.log10(this.counter + 1);\n    console.log(\"current attack: \" + newGain);\n    this.state.callbackFn(newGain);\n    this.counter++;\n    if(!(this.counter < this.state.attack)){\n      this.counter = 0; \n      clearInterval(this.attackInterval);\n      this.releaseInterval = setInterval(() => this.updateRelease(), this.secsPerUpdate);\n    }\n  }\n  updateRelease = () => {\n    //clear the attack interval and start the release timeout\n    let newGain = 0;\n    if(this.counter > this.state.release){\n      newGain = 0;\n      this.state.callbackFn(newGain);\n      clearInterval(this.releaseInterval);\n      if(this.attackInterval != null) clearInterval(this.attackInterval);\n    }\n    else {\n      newGain = this.state.gain - Math.log10((1/this.state.release)*this.counter + 1); //f(x) = log(-(x - 9)+ (z + 1)) puts y = 0 at the point (x, z); x-9 keeps starter point at gain = 1\n      this.state.callbackFn(newGain);\n      console.log(\"current release: \" + newGain);\n      this.counter++;\n    }\n\n  }\n  resetEnvelope = (props) => {\n    /**\n     * envelope takes attack and release and updates the envelope based on this \n     * by creating an interval var. \n     * creates interval that lasts length of attack,\n     * then once interval ends, calls the release callbackFn \n     * and runs that until it ends.\n     */\n    console.log(\"envelope triggered\");\n    this.counter = 0;\n    if(this.attackInterval != null) clearInterval(this.attackInterval);\n    if(this.releaseInterval != null) clearInterval(this.releaseInterval);\n    this.setState({gain: 1}, () => {\n      this.attackInterval = setInterval(() => this.updateAttack(), this.secsPerUpdate);\n      this.state.callbackFn(this.state.gain);\n      this.updateAttack();\n    });\n  }\n  render = (props) => {\n    return(\n      <div>\n        <button className=\"key\" id=\"triggerEnvelope\" onClick={() => this.resetEnvelope()}>Trigger Env</button>\n        <button className=\"key\" onClick={() => this.setLooping()} >Loop Envelope</button>\n        <Slider sliderName= \"Attack\" minVal = {0} maxVal = {50} defaultVal = {5} step = {1} callbackFn={this.setAttack}/>\n        <Slider sliderName= \"Release\" minVal = {0} maxVal = {50} defaultVal = {5} step = {1} callbackFn={this.setRelease}/>\n      </div> \n    );\n  }\n}\nclass Synth extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n\n    };\n\n  }\n  render = () => {\n    return(\n      <div></div>\n    );\n  }\n}\n//const mainOsc = new Osc()\nconst context = new window.AudioContext;\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(<Osc context = {context}/>);\n\n",{"ruleId":"27","severity":1,"message":"28","line":23,"column":9,"nodeType":"29","messageId":"30","endLine":23,"endColumn":15},{"ruleId":"27","severity":1,"message":"31","line":24,"column":9,"nodeType":"29","messageId":"30","endLine":24,"endColumn":19},{"ruleId":"32","severity":1,"message":"33","line":38,"column":27,"nodeType":"34","messageId":"35","endLine":38,"endColumn":29},{"ruleId":"32","severity":1,"message":"33","line":56,"column":27,"nodeType":"34","messageId":"35","endLine":56,"endColumn":29},{"ruleId":"32","severity":1,"message":"33","line":65,"column":35,"nodeType":"34","messageId":"35","endLine":65,"endColumn":37},{"ruleId":"32","severity":1,"message":"33","line":72,"column":32,"nodeType":"34","messageId":"35","endLine":72,"endColumn":34},{"ruleId":"27","severity":1,"message":"36","line":119,"column":11,"nodeType":"29","messageId":"30","endLine":119,"endColumn":19},{"ruleId":"27","severity":1,"message":"37","line":120,"column":11,"nodeType":"29","messageId":"30","endLine":120,"endColumn":19},{"ruleId":"32","severity":1,"message":"33","line":127,"column":27,"nodeType":"34","messageId":"35","endLine":127,"endColumn":29},{"ruleId":"27","severity":1,"message":"28","line":179,"column":11,"nodeType":"29","messageId":"30","endLine":179,"endColumn":17},{"ruleId":"27","severity":1,"message":"31","line":180,"column":11,"nodeType":"29","messageId":"30","endLine":180,"endColumn":21},{"ruleId":"27","severity":1,"message":"38","line":181,"column":11,"nodeType":"29","messageId":"30","endLine":181,"endColumn":15},{"ruleId":"32","severity":1,"message":"39","line":207,"column":33,"nodeType":"34","messageId":"35","endLine":207,"endColumn":35},{"ruleId":"27","severity":1,"message":"40","line":244,"column":11,"nodeType":"29","messageId":"30","endLine":244,"endColumn":24},{"ruleId":"27","severity":1,"message":"41","line":245,"column":11,"nodeType":"29","messageId":"30","endLine":245,"endColumn":18},{"ruleId":"27","severity":1,"message":"42","line":246,"column":11,"nodeType":"29","messageId":"30","endLine":246,"endColumn":25},{"ruleId":"27","severity":1,"message":"43","line":247,"column":11,"nodeType":"29","messageId":"30","endLine":247,"endColumn":26},{"ruleId":"27","severity":1,"message":"44","line":309,"column":7,"nodeType":"29","messageId":"30","endLine":309,"endColumn":12},{"ruleId":"45","severity":1,"message":"46","line":324,"column":17,"nodeType":"47","messageId":"48","endLine":324,"endColumn":40,"fix":"49"},"no-unused-vars","'filter' is assigned a value but never used.","Identifier","unusedVar","'oscillator' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'interval' is assigned a value but never used.","'envelope' is assigned a value but never used.","'mode' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'secsPerUpdate' is assigned a value but never used.","'counter' is assigned a value but never used.","'attackInterval' is assigned a value but never used.","'releaseInterval' is assigned a value but never used.","'Synth' is defined but never used.","new-parens","Missing '()' invoking a constructor.","NewExpression","missing",{"range":"50","text":"51"},[10868,10868],"()"]
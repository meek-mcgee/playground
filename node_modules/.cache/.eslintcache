[{"C:\\Users\\metra\\Desktop\\programming\\playground\\src\\index.js":"1"},{"size":15811,"mtime":1655143520133,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","suppressedMessages":"6","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"7"},"15bx9l3","C:\\Users\\metra\\Desktop\\programming\\playground\\src\\index.js",["8"],[],"import React from \"react\";\r\nimport ReactDOM from \"react-dom/client\"; //from react-dom/client, not react\r\nimport './index.css';\r\n\r\n/**\r\n * 'The sun is rising\r\n * it's almost dawn! \r\n * The night is short --\r\n * walk on, girl.\r\n */\r\n\r\n//test stuff\r\nclass Slider extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      minVal: props.minVal,\r\n      maxVal: props.maxVal,\r\n      step: props.step,\r\n      defaultVal: props.currentVal,\r\n      sliderName: props.sliderName,\r\n      callbackFn: function(value){\r\n        props.callbackFn(value);\r\n      },\r\n    }\r\n  }\r\n  render = (props) => {\r\n    return(\r\n      <span className=\"freq_slider\">\r\n        <div>{this.state.sliderName}</div>\r\n          <input type =\"range\" min={this.state.minVal} max={this.state.maxVal} defaultValue ={this.state.defaultVal} step = {this.state.step} className=\"slider\" id={this.state.sliderName} onChange={() =>{\r\n            this.state.callbackFn(document.getElementById(this.props.sliderName).value);\r\n          }}></input>\r\n      </span>\r\n    );\r\n  }\r\n}\r\nclass Sequencer extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      length: 4,\r\n      currentStep: 0,\r\n      rootFreq: 440,\r\n      running: false,\r\n      tempo: 1000, //in milliseconds\r\n      callbackFn: this.props.callbackFn,\r\n    };\r\n    this.interval = null;\r\n    this.envelope = null;\r\n  }\r\n  pluckSequence = (step) => {\r\n    this.setState({currentStep: step});\r\n    let newFreq = this.state.rootFreq * (step + 0.5);\r\n    this.state.callbackFn(newFreq);\r\n    console.log(step);\r\n    if(this.state.running === false) {\r\n      this.interval = setInterval(() => this.runSequence(), this.state.tempo);\r\n    }\r\n  }\r\n  runSequence = () => {\r\n    document.getElementById(\"triggerEnvelope\").click(); //will break when there's more than one envelope, must fix later\r\n    let step = (this.state.currentStep + 1) % this.state.length;\r\n    this.setState({currentStep: step, running: true});\r\n    let newFreq = this.state.rootFreq * (step + 0.5);\r\n    this.setState({rootFreq: this.state.callbackFn(newFreq)});\r\n    console.log(\"Current Pitch: \" + newFreq + \"Current Step: \" + step);\r\n  }\r\n  stopSequence = () => {\r\n\r\n  }\r\n  stepUpLength = () => {\r\n    this.setState({length: this.state.length + 1});\r\n  }\r\n  stepDownLength = () => {\r\n    if(this.state.length - 1 > 0) this.setState({length: this.state.length - 1});\r\n    else console.error(\"Minimum sequencer length reached\");\r\n  }\r\n  updateTempo = (newTempo) => {\r\n    this.setState({tempo: newTempo});\r\n    clearInterval(this.interval);\r\n    this.interval = setInterval(() => this.runSequence(), newTempo);\r\n  }\r\n  render = (props) => {\r\n    const buttonList = [];\r\n    for(let i = 0; i < this.state.length; i++){\r\n      console.log(buttonList);\r\n      buttonList[i] = <button className=\"seqStep\" key={i + '_step'} onClick={() => this.pluckSequence(i)}>{i}</button>;\r\n    }\r\n    return(\r\n      <div className=\"inlineDiv\">\r\n        <button className=\"key\" onClick={() => this.stepUpLength() }>+</button>\r\n        <button className=\"key\" onClick={() => this.stepDownLength() }>-</button>\r\n        <Slider sliderName=\"Tempo\" minVal={20} maxVal={1000} defaultVal={100} callbackFn={this.updateTempo} />\r\n        {buttonList}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nclass Filter extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      cutoff: 5000,\r\n      resonance: 1,     //between 0.0001 and 1000\r\n      initialized: false,\r\n    }\r\n    this.context = null;\r\n    this.filter = 0;\r\n    this.oscillator = this.props.oscillator;\r\n    this.mode = 'lowpass';\r\n  }\r\n  init = (props) => {\r\n    if(this.props.oscillator !== null){\r\n      this.oscillator = this.props.oscillator;\r\n      this.setState({initialized: true}, () => {\r\n        this.context = this.oscillator.context;\r\n        this.filter = this.context.createBiquadFilter();\r\n        console.log(this.oscillator);\r\n        console.log(this.oscillator.gain);\r\n        this.oscillator.gain.connect(this.filter);\r\n        this.filter.connect(this.context.destination);\r\n        this.filter.type = this.mode;\r\n        this.filter.frequency.setValueAtTime(this.state.cutoff, 1);\r\n        this.filter.Q.value = this.state.resonance;\r\n        console.log(\"filter initialized\");\r\n        console.log(this.filter);\r\n        console.log(this.context.destination);\r\n      })\r\n    }\r\n    else console.error(\"this.props.oscillator == null\");\r\n    \r\n  }\r\n  updateCutoff = (freq) => {\r\n    if(this.context) this.setState({cutoff: freq}, this.updateFilter());\r\n  }\r\n  updateResonance = (q) => {\r\n    if(this.context) this.setState({resonance: q}, this.updateFilter());\r\n  }\r\n  updateFilter = () => {\r\n    if(this.context !== null){\r\n      if(this.state.initialized !== false){\r\n        this.filter.frequency.setValueAtTime(this.state.cutoff, 1);\r\n        this.filter.Q.value = this.state.resonance;\r\n        this.filter.type = this.mode;\r\n        console.log(\"filter updated\");\r\n      }\r\n      else this.init();\r\n      \r\n    } \r\n    else console.error(\"failed to load audioContext() in updateFilter()\")\r\n  }\r\n  updateMode = (mode) => {\r\n    this.mode = mode;\r\n    this.updateFilter();\r\n  }\r\n  render(){\r\n    return(\r\n      <div>\r\n        <div>\r\n          <Slider sliderName = \"Cutoff\" minVal={0} maxVal={5000} defaultVal={this.state.cutoff} callbackFn={this.updateCutoff}/>\r\n          <Slider sliderName = \"Resonance\" minVal={1} maxVal={10} step={0.1} defaultVal={this.state.resonance} callbackFn={this.updateResonance}/>\r\n        </div>\r\n        <div>\r\n          <button className=\"key\" id=\"lowpass_button\" onClick={() => this.updateMode('lowpass')}> lowpass </button>\r\n          <button className=\"key\" onClick={() => this.updateMode('highpass')}> highpass </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\nclass Envelope extends React.Component {\r\n  //Takes in a gain node from props.oscillator.gain\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      attack: 50, //cycles of updateAttack\r\n      release: 50, //cycles of updateRelease\r\n      gain: 1,\r\n      callbackFn: this.props.callbackFn,\r\n    }\r\n    this.gain = null;\r\n    this.counter = 0;\r\n    this.attackInterval = null;\r\n    this.releaseInterval = null;\r\n  }\r\n  updateGain = (newGain) => {\r\n    this.gain.gain.setValueAtTime(newGain, 0);\r\n    console.log('gain updated');\r\n  }\r\n  setAttack = (val) => this.setState({attack: val});\r\n  setRelease = (val) => this.setState({release: val});\r\n  updateAttack = () => {\r\n    //let newGain = this.state.gain/(this.state.attack - this.counter);\r\n    let newGain = Math.log10(this.counter + 1);\r\n    //console.log(\"current attack: \" + newGain);\r\n    this.updateGain(newGain);\r\n    this.counter++;\r\n    if(!(this.counter < this.state.attack)){\r\n      this.counter = 0; \r\n      clearInterval(this.attackInterval);\r\n      this.releaseInterval = setInterval(() => this.updateRelease(), 0);\r\n    }\r\n  }\r\n  updateRelease = () => {\r\n    //clear the attack interval and start the release timeout\r\n    let newGain = 0;\r\n    if(this.counter >= this.state.release){\r\n      newGain = 0;\r\n      this.updateGain(newGain);\r\n      clearInterval(this.releaseInterval);\r\n      if(this.attackInterval !== null) clearInterval(this.attackInterval);\r\n    }\r\n    else {\r\n      newGain = this.state.gain - Math.log10((1/this.state.release)*this.counter + 1); //f(x) = log(-(x - 9)+ (z + 1)) puts y = 0 at the point (x, z); x-9 keeps starter point at gain = 1\r\n      this.updateGain(newGain);\r\n      //console.log(\"current release: \" + newGain);\r\n      this.counter++;\r\n    }\r\n\r\n  }\r\n  resetEnvelope = (props) => {\r\n    /**\r\n     * envelope takes attack and release and updates the envelope based on this \r\n     * by creating an interval var. \r\n     * creates interval that lasts length of attack,\r\n     * then once interval ends, calls the release callbackFn \r\n     * and runs that until it ends.\r\n     */\r\n    console.log(\"envelope triggered\");\r\n    this.gain = this.props.oscillator.gain;\r\n    this.counter = 0;\r\n    if(this.attackInterval !== null) clearInterval(this.attackInterval);\r\n    if(this.releaseInterval !== null) clearInterval(this.releaseInterval);\r\n    this.setState({gain: 1}, () => {\r\n      console.log('this.secsPerUpdate: ' + this.secsPerUpdate);\r\n      this.attackInterval = setInterval(() => this.updateAttack(), 0);\r\n      this.updateGain(this.state.gain);\r\n      this.updateAttack();\r\n    });\r\n  }\r\n  render = (props) => {\r\n    return(\r\n      <div>\r\n        <button className=\"key\" id=\"triggerEnvelope\" onClick={() => this.resetEnvelope()}>Trigger Env</button>\r\n        <button className=\"key\" onClick={() => this.setLooping()} >Loop Envelope</button>\r\n        <Slider sliderName= \"Attack\" minVal = {0} maxVal = {50} defaultVal = {5} step = {1} callbackFn={this.setAttack}/>\r\n        <Slider sliderName= \"Release\" minVal = {0} maxVal = {50} defaultVal = {5} step = {1} callbackFn={this.setRelease}/>\r\n      </div> \r\n    );\r\n  }\r\n}\r\nclass Oscillator extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      rootFreq: 440,\r\n      currentFreq: 440,\r\n      playing: false,\r\n      context: props.context,\r\n      initialized: false,\r\n    };\r\n    this.oscillator = null;\r\n    this.sequencer = null;\r\n  }\r\n  printMessage = () => {console.log('hello');}\r\n  init = () => {\r\n    //init audioContext\r\n    this.setState({initialized: true});\r\n    this.oscillator = this.state.context.createOscillator();\r\n    this.oscillator.gain = this.state.context.createGain();\r\n    this.oscillator.gain.gain.setValueAtTime(1, 0);\r\n    this.oscillator.type = 'square';\r\n    this.oscillator.frequency.setValueAtTime(this.state.rootFreq, 2);\r\n    this.oscillator.connect(this.oscillator.gain);\r\n    this.sequencer = <Sequencer callbackFn = {this.updateFreq}/>\r\n    this.play();\r\n  }\r\n  play = () => {\r\n    if(this.state.playing === false) this.oscillator.start();\r\n  }\r\n  stop = () => {\r\n    if(this.state.playing === true) {\r\n      this.setState({playing: false}, () => this.oscillator.stop());\r\n    }\r\n  }\r\n  updateGain = (newGain) => {\r\n    this.oscillator.gain.gain.setValueAtTime(newGain, 0);\r\n    console.log('gain updated');\r\n  }\r\n  updateRootFreq = (newFreq) => {\r\n    //For pitch adjustment purposes -- do not use with sequencer class\r\n    this.setState({rootFreq: newFreq}, () => this.updateFreq(newFreq));\r\n  }\r\n  updateFreq = (newFreq) => {\r\n    //For sequencing purposes\r\n    this.setState({currentFreq: newFreq}, () => {\r\n      if(this.oscillator !== null) this.oscillator.frequency.value = this.state.currentFreq;\r\n    })\r\n    return this.state.rootFreq;\r\n  }\r\n  render = () => {\r\n    return (\r\n      <div className=\"mainDiv\">\r\n        {/** Render play/pause buttons */}\r\n        <button className=\"key\" onClick={ () => {\r\n        this.state.context.resume();\r\n        if(this.state.initialized === false){\r\n          this.init();\r\n        }\r\n        else this.play();\r\n       } }>Play</button>\r\n       <button className=\"key\" onClick={ () => {\r\n         this.state.context.suspend();\r\n         if(this.state.playing === true) this.stop()\r\n       }}>Stop</button>\r\n       {/** Render gain/pitch sliders */}\r\n       {this.sequencer}\r\n       <Slider sliderName = \"Gain\" minVal = {0} maxVal = {1} defaultVal = {0.5} step ={0.05} callbackFn = {this.updateGain} />\r\n       <Slider sliderName = \"Pitch\" minVal = {0} maxVal = {1000} defaultVal = {440} callbackFn = {this.updateRootFreq} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nclass Connector {\r\n  constructor(o, d, cb){ //o - origin, d - destination, cb - callbackFunction()\r\n    this.origin = o;\r\n    this.destination = d;\r\n    this.callbackFn = cb;\r\n  }\r\n  getOrigin = () => this.origin;\r\n  getDestination = () => this.destination;\r\n  getCallbackFn = () => this.callbackFn;\r\n  connect = () => this.origin.connect(this.destination);\r\n  disconnect = () => this.origin.disconnect(this.destination);\r\n}\r\n\r\nclass Synth extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      rootFreq: 440,\r\n      currentFreq: 440,\r\n      playing: false,\r\n      context: props.context,\r\n      initialized: false,\r\n      currentModules: [],\r\n      moduleList: ['oscillator', 'filter', 'envelope'],\r\n    };\r\n    this.oscillator = null;\r\n  }\r\n  init = () => {\r\n    //init audioContext\r\n    this.setState({initialized: true}, () => document.getElementById(\"lowpass_button\").click()); //initializes filter \r\n    this.oscillator = this.state.context.createOscillator();\r\n    this.oscillator.gain = this.state.context.createGain();\r\n    this.oscillator.gain.gain.setValueAtTime(1, 0);\r\n    this.oscillator.type = 'square';\r\n    this.oscillator.frequency.setValueAtTime(this.state.rootFreq, 2);\r\n    this.oscillator.connect(this.oscillator.gain);\r\n    this.play();\r\n  }\r\n  play = () => {\r\n    if(this.state.playing === false) this.oscillator.start();\r\n  }\r\n  stop = () => {\r\n    if(this.state.playing === true) {\r\n      this.setState({playing: false}, () => this.oscillator.stop());\r\n    }\r\n  }\r\n  updateGain = (newGain) => {\r\n    this.oscillator.gain.gain.setValueAtTime(newGain, 0);\r\n    console.log('gain updated');\r\n  }\r\n  updateRootFreq = (newFreq) => {\r\n    //For pitch adjustment purposes -- do not use with sequencer class\r\n    this.setState({rootFreq: newFreq}, () => this.updateFreq(newFreq));\r\n  }\r\n  updateFreq = (newFreq) => {\r\n    //For sequencing purposes\r\n    this.setState({currentFreq: newFreq}, () => {\r\n      if(this.oscillator !== null) this.oscillator.frequency.value = this.state.currentFreq;\r\n    })\r\n    return this.state.rootFreq;\r\n  }\r\n  addModule = (stringIndex) => {\r\n    let subArray = this.state.currentModules;\r\n    switch(stringIndex) {\r\n      case 'oscillator':\r\n        console.log('oscillator');\r\n        subArray.push(<Oscillator context={this.state.context} />);\r\n        this.setState({currentModules: subArray});\r\n        break;\r\n      case 'filter':\r\n        console.log('filter');\r\n        subArray.push(<Filter oscillator = {this.oscillator} />);\r\n        this.setState({currentModules: subArray});\r\n        break;\r\n      case 'envelope':\r\n        console.log('envelope');\r\n        subArray.push(<Envelope oscillator = {this.oscillator} callbackFn = {this.updateGain} />);\r\n        this.setState({currentModules: subArray});\r\n        break;\r\n      default:\r\n        console.error('Synth.addModule() stringIndex out of range');\r\n    }\r\n    console.log(this.state.currentModules);\r\n  }\r\n  render = () => {\r\n    \r\n    const availableModules = [];\r\n    for(let i = 0; i < this.state.moduleList.length; i++ ){\r\n      availableModules[i] = <button className=\"key\" key={this.state.moduleList[i] + \"_module\"} onClick={() => this.addModule(this.state.moduleList[i])}>{this.state.moduleList[i]}</button>\r\n    }\r\n    return (\r\n      <div className=\"mainDiv\">\r\n        <button className=\"key\" onClick={ () => {\r\n        this.state.context.resume();\r\n        if(this.state.initialized === false){\r\n          this.init();\r\n          \r\n        }\r\n        else this.play();\r\n       } }>Play</button>\r\n       <button className=\"key\" onClick={ () => {\r\n         this.state.context.suspend();\r\n         if(this.state.playing === true) this.stop()\r\n       }}>Stop</button>\r\n       <Slider sliderName = \"Gain\" minVal = {0} maxVal = {1} defaultVal = {0.5} step ={0.05} callbackFn = {this.updateGain} />\r\n       <Slider sliderName = \"Pitch\" minVal = {0} maxVal = {1000} defaultVal = {440} callbackFn = {this.updateRootFreq} />\r\n       <Filter oscillator = {this.oscillator} />\r\n       <Sequencer callbackFn = {this.updateFreq}/>\r\n       <Envelope oscillator = {this.oscillator} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nconst context = new window.AudioContext();\r\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\r\nroot.render(<Synth context = {context}/>);\r\n\r\n",{"ruleId":"9","severity":1,"message":"10","line":326,"column":7,"nodeType":"11","messageId":"12","endLine":326,"endColumn":16},"no-unused-vars","'Connector' is defined but never used.","Identifier","unusedVar"]